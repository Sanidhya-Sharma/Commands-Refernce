---------------------------------------------------------------------------------GIT HUB-----------------------------------------------------------------------------------------

# Note : Currently the "master" is being replaced with "main" as a default repository
# To overcome the issue of master not being the default repository please use the following command if you start with master and main is your default repository
    
    # Rename your current repository from master to main
    git branch -m master main 
    
    # Push the staged data to main 
    git push -u origin main 
    
    # Reset head to commit of main 
    git remote set-head origin main

-------------------------------------------------------------------------
SETUP
Configuring user information used across all local repositories
-------------------------------------------------------------------------

# Adding local and global name in git CLI
LOCAL = $ git config --local user.name "[name]"
GLOBAL = $ git config --global user.name "[name]"

# Adding local and global email in git CLI 
LOCAL = $ git config --local user.email "[email]"
GLOBAL = $ git config --global user.email "[email]"

# Setting Global UI color for Git CLI
$ git config --global color.ui auto

-------------------------------------------------------------------------
Repository Setup 
Configuring New Respository and cloning from git 
-------------------------------------------------------------------------

# Check the current repository (pull and push)
$ git remote -v

# add a new remote Respository : (Just empty repository)
$ git remote add origin "git@your.git.repo.example.com:user/repository2.git"

# Setting set-url will edit the url of existing remote repository (Just empty repository)
$ git remote set-url origin "git@your.git.repo.example.com:user/repository2.git"

# Cloning someone/your repository 
$ git clone "git@someones.git.repo.example.com:user/repository2.git"

# Cloning someones repository into a folder "ClonedRepo" if the folder the does not exist new one is created automatically
$ git clone "git@someones.git.repo.example.com:user/repository2.git" ClonedRepo

-------------------------------------------------------------------------
SETUP & INIT
Configuring user information, initializing and cloning repositories
-------------------------------------------------------------------------

# Git initialization
$ git init 

# Creating a Readme file 
$ touch README.md

# Adding a Readme file 
$ git add README.md

# Creating a LICENSE file 
$ touch LICENSE.txt

# Add a LICENCE file 
$ git add LICENSE

# Git stage the changes 
$ git add [filename]
 
 or 

# Get status of changes done which are not yet staged 
$ git status

# Pull Changes from the remote master/main 
# git pull origin master/main

# Git stage all the changes at once 
$ git add .

# Unstage a file while retaining the changes in working directory
$ git reset [filename]

# Diff of what is changed but not staged
$ git diff

# Diff of what is staged but not yet commited
$ git diff --staged

# Commit your staged content as a new commit snapshot
$ git commit -m "[discriptive message]"

# will push your code to the master branch of the remote repository defined with origin and -u let you point your current local branch to the remote master branch:
$ git push -u origin master/main

# Force your local changes to the remote origin master/main repository [Avoid this unless nescessary]
$ git push -f origin master

# Remove .git folder 
$ rm rf .git 

# clear staging area, rewrite working tree from specified commit [PLEASE KEEP A BACKUP BEFORE APPLYING]
$ git reset --hard [commit-ID]

# Save modified and staged changes
$ git stash

# list stack-order of stashed file changes
$ git stash list

# write working from top of stash stack
$ git stash pop

# discard the changes from top of stash stack
$ git stash drop

-------------------------------------------------------------------------
BRANCH & MERGE
Isolating work in branches, changing context, and integrating changes
-------------------------------------------------------------------------

# To see all remote branches and List all remote branches. 
$ git branch -a

# To see remote branches, run this command:
git branch -r

# move from one branch to another or to master 
$ git checkout [branch_name]/[master]

# Merge your branch with master 
    
    # Move to the master/main branch 
    $ git checkout master/main

    # Get the current changes in the master/main
    $ git pull origin master/main

    # Merge with branch 
    $ git merge <branch_name>

# Rename a branch 
$ git branch -m <old_name> <new_name>

# "-d" Delete the specified branch. This is a “safe” operation in that Git prevents you from deleting the branch if it has unmerged changes.
# "-D" Force delete the specified branch, even if it has unmerged changes. This is the command to use if you want to permanently throw away all of the commits associated with a particular line of development.

# Safe Delete a branch 
$ git branch -d <branch>

# Force Delete a branch 
$ git branch -D <branch>

-------------------------------------------------------------------------
INSPECT & COMPARE
Examining logs, diffs and object information
-------------------------------------------------------------------------

# Show the commit history for the currently active branch
$ git log

# Show the commits on branchA that are not on branchB
$ git log branchB..branchA

# Show the commits that changed file, even across renames
$ git log --follow [file]

# Show the diff of what is in branchA that is not in branchB
$ git diff branchB...branchA

# Show any object in Git in human-readable format
$ git show [SHA]


------------------------------------------------------------------------------Boiler Plate for Gitignore------------------------------------------------------------------------------------
#OS junk files
[Tt]humbs.db
*.DS_Store

#Visual Studio files
*.[Oo]bj
*.user
*.aps
*.pch
*.vspscc
*.vssscc
*_i.c
*_p.c
*.ncb
*.suo
*.tlb
*.tlh
*.bak
*.[Cc]ache
*.ilk
*.log
*.lib
*.sbr
*.sdf
*.pyc
*.xml
ipch/
obj/
[Bb]in
[Dd]ebug*/
[Rr]elease*/
Ankh.NoLoad

#Tooling
_ReSharper*/
*.resharper
[Tt]est[Rr]esult*

#Project files
[Bb]uild/

#Subversion files
.svn

# Office Temp Files
~$*
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------ANACONDA-CONDA----------------------------------------------------------------------------
""" 
Best practice includes to install packages via conda and only use pip when the perticular package is not available as conda uses Anaconda cloud (Conda-forge, bioconda) with over 1500 
packages but pip installs from the PYPI (Python Package Index) and GIT with over 1,50,000 packages

conda - Package Maneger + Envioment Maneger
pip - Package Maneger
"""

""" 
# All the packages available in Anaconda 
--> https://docs.anaconda.com/anaconda/packages/pkg-docs/
"""

# Show version information for the current active Python
$ python --version

# Show the locations of all versions of Python that are currently in the path
Windows : $ where python 
Linux/Mac : $ which -a python 

# Get infor about the current interpreter and all related details 
$ conda info 

# Use conda to search for a package
$ conda search <PACKAGENAME>

# Install packages from the Anaconda Cloud, Conda-forge and bioconda
$ conda install <PACKAGENAME>

# Install package in conda from single channel (Using --channel)
$ conda install <PACKAGENAME> --channel conda-forge 

# Install packages from multiple channels 
$ conda install <PACKAGENAME> --channel conda-forge --channel bioconda

# Install a new package in a different environment 
$ conda install --name <ENVIORMENT-NAME> <PACKAGENAME>

# Remove one or more packages from a specific environment
$ conda remove --name <ENVIORMENT-NAME> <PACKAGENAME-1> <PACKAGENAME-2>

# Update any installed program
$ conda update <PACKAGENAME>

# Create a new conda environment from a list of specified packages.
$ conda create 

# Display all current packages that conda is aware of installed 
$ conda list

# Upgrade Conda Package & Enviorment Maneger 
$ conda update -n base -c defaults conda

# Update conda to the current version
$ conda update conda

# Run an executable in a conda environment.
$ 

# Save environment to a text file 
$ conda list --explicit > requirements.txt

-------------------------------------------------------------------------------CONDA VIRTUAL ENVIORMENTS-------------------------------------------------------------------------------
# Here the [myenv] is aliases for your env folder 

# Creating a new ENVIORMENTS with python version 
$ conda create -n [myenv] python=3.9

# Viewing the list of eviorments 
$ conda info --envs
or 
$ conda env list

# Activate Enviorments
Windows : $ conda activate [myenv]
Linux/Mac : $ source activate [myenv]


# Deactivate Enviorments 
Windows : $ conda decativate [myenv]
Linux/Mac : $ source deactivate [myenv]

# viewing list of packages installed 
$ conda list -n [myenv]
or 
# view all the installed packages in the active enviorment 
$ conda list 

# Delete an environment and everything in it
$ conda remove --name [myenv] --all

# Make exact copy of an environment
$ conda create --clone <ENV-NAME> --name <ENV-NAME>-2


--------------------------------------------------------------------------------------HEROKU CLI-----------------------------------------------------------------------------------
# Got to the location where the where the project is with the normal command prompt windows, got into the root directory of the project/ wokring directory

# Get the installed version of heroku 
$ heroku --version 

# Login in into Heroku
$ heroku login 

# Create a new app (if not create app in the heroku website)
$ heroku create

# Work under already created app (if created a app at heroku website)
$ heroku git:remote -a [appName]

# Git init the file (if already done using github skip this)
$ git init

# Clear Heroku Staged cache
$ heroku buildpacks:clear
$ heroku buildpacks:set heroku/python

# Adding the files
$ git add .

# Committing the files 
$ git commit -am "blah blah"

# Pushing the files
$ git push heroku master

# Get the logs of the running application 
$ heroku logs --tail

----------------------------------------------------------------------------------------Requirements.txt--------------------------------------------------------------------------
# Creating conda packages list (Might have compatibility issue with non-Anaconda applications)
$ conda list > requirements.txt

# Always use this it avoids the #links comming in the requirements text file 
$ pip list --format=freeze > requirements.txt

------------------------------------------------------------------- Jupyter Notebook (Kernal) ------------------------------------------------------------

Please open Anaconda Prompt in Admin mode 
NOTE* <python environment> --> enviorment name 

# Check the number of available kernals 
$ jupyter kernelspec list 

# Add a new enviorment (Anaconda prompt) -- > creates a JSON file in C:\Users\<USER NAME>\AppData\Roaming\Jupyter\Kernels\<<python environment>>\Kernel.json
$ python -m ipykernel install --user --name <python environment> --display-name "Python (<python environment>)"

# Reading the Kernel.json JSON FILE
{
 "argv": [
  "G:\\Program_files\\Anaconda\\envs\\tf_gpu\\python.exe",      ---------> Location for custom enviorment python 
  "-m",
  "ipykernel_launcher",
  "-f",
  "{connection_file}"
 ],
 "display_name": "Python (tf_gpu)",                             ----------> Name of enviorment "Python(<enviorment name>)"
 "language": "python"
}

# Remove the kernal aviable to jupyter notebook 
$ jupyter kernelspec remove [enviorment_name]


# Facing problems with jupyter notebook after adding tf_gpu ENVS 
pip install --upgrad ipykernel
pip install notebook --upgrade 
conda install tornado --update
pip uninstall pyzmq
pip install pyzmq
conda update -n base -c defaults conda

----------------------------------------------------------------------------------Anaconda Enviomental Variables---------------------------------------------------------------------------

PATH (mandatory)
G:\Program_files\Anaconda
G:\Program_files\Anaconda\Library\mingw-w64\bin
G:\Program_files\Anaconda\Library\usr\bin
G:\Program_files\Anaconda\Scripts

ENV PATH (optional)
G:\Program_files\Anaconda\envs
G:\Program_files\Anaconda\envs\tf_gpu
G:\Program_files\Anaconda\envs\tf_gpu\Library\bin
G:\Program_files\Anaconda\envs\tf_gpu\Scripts



----------------------------------------------------------------------------------LICENCES TEMPLATES---------------------------------------------------------------------------


_________________________________________________GPU (GENERAL PUBLIC LICENCE)__________________________________________________

# If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.
# To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the “copyright” line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.


# If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.



_______________________________________________APACHE LICENSE, VERSION 2.0__________________________________________________

# Include a copy of the Apache License, typically in a file called LICENSE, in your work, and consider also including a NOTICE file that references the License.
# To apply the Apache License to specific files in your work, attach the following boilerplate declaration, replacing the fields enclosed by brackets "[]" with your own identifying information. (Don't include the brackets!) Enclose the text in the appropriate comment syntax for the file format. We also recommend that you include a file or class name and description of purpose on the same "printed page" as the copyright notice for easier identification within third-party archives.

    Copyright [yyyy] [name of copyright owner]

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.


___________________________________________________Berkeley Software Distribution (BSD)_________________________________________________________

# BSD has two main versions: 2-clause and 3-clause. They both offer more flexibility to the users than the Apache License 2.0. 

The 2-Clause BSD License :
# Copy the code below and paste it in your code 

    Copyright <YEAR> <COPYRIGHT HOLDER>

    Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


The 3-Clause BSD License :
# If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.
# To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the “copyright” line and a pointer to where the full notice is found.

    Copyright <YEAR> <COPYRIGHT HOLDER>

    Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


_____________________________________________________ MIT LICENSE________________________________________________________________________

    Copyright © 2022 <copyright holders>

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


# To choose an appropiate license please go to : https://choosealicense.com/